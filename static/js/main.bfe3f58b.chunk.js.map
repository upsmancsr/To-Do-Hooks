{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","initialTodos","id","uuid","task","complete","todoReducer","state","action","type","map","todo","concat","Error","filterReducer","FilterMenu","dispatch","className","onClick","TodoList","todos","key","TodoItem","useContext","checked","onChange","AddTodo","useState","setTask","onSubmit","event","preventDefault","value","target","App","useReducer","dispatchTodos","filter","dispatchFilter","filteredTodos","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+yBASA,IAAMA,EAAcC,wBAAc,MAE5BC,EAAe,CACnB,CACEC,GAAIC,MACJC,KAAM,cACNC,UAAU,GAEZ,CACEH,GAAIC,MACJC,KAAM,iBACNC,UAAU,GAEZ,CACEH,GAAIC,MACJC,KAAM,gBACNC,UAAU,IAQRC,EAAc,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MAEb,IAAK,UACH,OAAOF,EAAMG,KAAI,SAAAC,GACf,OAAIA,EAAKT,KAAOM,EAAON,GACd,EAAP,GAAYS,EAAZ,CAAkBN,UAAU,IAErBM,KAIb,IAAK,YACH,OAAOJ,EAAMG,KAAI,SAAAC,GACf,OAAIA,EAAKT,KAAOM,EAAON,GACd,EAAP,GAAYS,EAAZ,CAAkBN,UAAU,IAErBM,KAIb,IAAK,WACH,OAAOJ,EAAMK,OAAO,CAClBR,KAAMI,EAAOJ,KACbF,GAAIM,EAAON,GACXG,UAAU,IAGd,QACE,MAAM,IAAIQ,QAKVC,EAAgB,SAACP,EAAOC,GAC5B,OAAQA,EAAOC,MACb,IAAK,WACH,MAAO,MACT,IAAK,gBACH,MAAO,WACT,IAAK,kBACH,MAAO,aACT,QACE,MAAM,IAAII,QAkCVE,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAWpB,OACE,yBAAKC,UAAU,cACb,4BAAQR,KAAK,SAASS,QAZJ,WACpBF,EAAS,CAAEP,KAAM,eAWf,YAGA,4BAAQA,KAAK,SAASS,QAZC,WACzBF,EAAS,CAAEP,KAAM,oBAWf,iBAGA,4BAAQA,KAAK,SAASS,QAZG,WAC3BF,EAAS,CAAEP,KAAM,sBAWf,qBAOAU,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,yBAAKH,UAAU,YACb,2CACA,yBAAKA,UAAU,QACZG,EAAMV,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAUU,IAAKV,EAAKT,GAAIS,KAAMA,UAMhCW,EAAW,SAAC,GAAc,IAAZX,EAAW,EAAXA,KACZK,EAAWO,qBAAWxB,GAQ5B,OACI,+BACE,2BACEU,KAAK,WACLe,QAASb,EAAKN,SACdoB,SAXa,kBACnBT,EAAS,CACPP,KAAME,EAAKN,SAAW,YAAc,UACpCH,GAAIS,EAAKT,QAUNS,EAAKP,OAKRsB,EAAU,WACd,IAAMV,EAAWO,qBAAWxB,GADR,EAEI4B,mBAAS,IAFb,mBAEbvB,EAFa,KAEPwB,EAFO,KAcpB,OACE,0BAAMX,UAAU,UAAUY,SAXP,SAAAC,GACf1B,GACFY,EAAS,CAAEP,KAAM,WAAYL,OAAMF,GAAIC,QAEzCyB,EAAQ,IACRE,EAAMC,mBAOJ,2BAAOtB,KAAK,OAAOuB,MAAO5B,EAAMqB,SAJf,SAAAK,GAAK,OAAIF,EAAQE,EAAMG,OAAOD,UAK/C,4BAAQvB,KAAK,UAAb,cAKSyB,EA9GH,WAAM,MAEeC,qBAAW7B,EAAaL,GAFvC,mBAETmB,EAFS,KAEFgB,EAFE,OAGiBD,qBAAWrB,EAAe,OAH3C,mBAGTuB,EAHS,KAGDC,EAHC,KAKVC,EAAgBnB,EAAMiB,QAAO,SAAA1B,GAEjC,MAAe,QAAX0B,MAGW,aAAXA,IAAyB1B,EAAKN,WAGnB,eAAXgC,IAA4B1B,EAAKN,aAMvC,OACE,kBAACN,EAAYyC,SAAb,CAAsBR,MAAOI,GAC7B,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAYD,SAAUsB,IACtB,kBAAC,EAAD,CAAUlB,MAAOmB,IACjB,kBAAC,EAAD,SC5FcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bfe3f58b.chunk.js","sourcesContent":["import React, { \n  useState, \n  useReducer, \n  createContext, \n  useContext \n} from 'react';\nimport uuid from 'uuid/v4';\nimport './App.css';\n\nconst TodoContext = createContext(null);\n\nconst initialTodos = [\n  {\n    id: uuid(),\n    task: 'Learn React',\n    complete: true,\n  },\n  {\n    id: uuid(),\n    task: 'Learn Firebase',\n    complete: true,\n  },\n  {\n    id: uuid(),\n    task: 'Learn GraphQL',\n    complete: false,\n  },\n];\n\n// reducer functions receive the current state and an action as arguments\n// and return a new state based on the action type:\n\n// todoReducer, taking todos array as the state argument:\nconst todoReducer = (state, action) => {\n  switch (action.type) {\n    // change todo complete to true:\n    case 'DO_TODO':\n      return state.map(todo => {\n        if (todo.id === action.id) {\n          return { ...todo, complete: true }\n        } else {\n          return todo;\n        }\n      });\n    // change todo complete to false:\n    case 'UNDO_TODO':\n      return state.map(todo => {\n        if (todo.id === action.id) {\n          return { ...todo, complete: false }\n        } else {\n          return todo;\n        }\n      });\n    // create a new todo:\n    case 'ADD_TODO':\n      return state.concat({\n        task: action.task,\n        id: action.id,\n        complete: false\n      });\n    // if action.type is none of the above, throw error by default\n    default:\n      throw new Error();\n  }\n};\n\n// filterReducer for choosing what types of todos to display:\nconst filterReducer = (state, action) => {\n  switch (action.type) {\n    case 'SHOW_ALL':\n      return 'ALL';\n    case 'SHOW_COMPLETE':\n      return 'COMPLETE';\n    case 'SHOW_INCOMPLETE':\n      return 'INCOMPLETE';\n    default:\n      throw new Error();\n  }\n};\n\nconst App = () => {\n  // Define variables to store in state, as well as the methods to update their values:\n  const [todos, dispatchTodos] = useReducer(todoReducer, initialTodos);\n  const [filter, dispatchFilter] = useReducer(filterReducer, 'ALL');\n\n  const filteredTodos = todos.filter(todo => {\n    // 'filter' variable below is stored in state\n    if (filter === 'ALL') {\n      return true;\n    }\n    if (filter === 'COMPLETE' && todo.complete) {\n      return true;\n    }\n    if (filter === 'INCOMPLETE' && !todo.complete) {\n      return true\n    }\n    return false;\n  });\n\n  return (\n    <TodoContext.Provider value={dispatchTodos}>\n    <div className=\"App\">\n      <FilterMenu dispatch={dispatchFilter} />\n      <TodoList todos={filteredTodos} />\n      <AddTodo />\n    </div>\n    </TodoContext.Provider>\n  );\n};\n\nconst FilterMenu = ({ dispatch }) => {\n  const handleShowAll = () => {\n    dispatch({ type: 'SHOW_ALL'});\n  };\n  const handleShowComplete = () => {\n    dispatch({ type: 'SHOW_COMPLETE'});\n  };\n  const handleShowIncomplete = () => {\n    dispatch({ type: 'SHOW_INCOMPLETE'});\n  };\n\n  return (\n    <div className=\"FilterMenu\">\n      <button type=\"button\" onClick={handleShowAll}>\n        Show All\n      </button>\n      <button type=\"button\" onClick={handleShowComplete}>\n        Show Complete\n      </button>\n      <button type=\"button\" onClick={handleShowIncomplete}>\n        Show Incomplete\n      </button>\n    </div>\n  );\n};\n\nconst TodoList = ({ todos }) => (\n  <div className=\"ToDoList\">\n    <h3>To Do Items</h3>\n    <div className=\"list\">\n      {todos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n    </div>\n  </div>\n);\n\nconst TodoItem = ({ todo }) => {\n  const dispatch = useContext(TodoContext);\n\n  const handleChange = () =>\n    dispatch({\n      type: todo.complete ? 'UNDO_TODO' : 'DO_TODO',\n      id: todo.id,\n    });\n\n  return (\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={todo.complete}\n          onChange={handleChange}\n        />\n        {todo.task}\n      </label>\n  );\n};\n\nconst AddTodo = () => {\n  const dispatch = useContext(TodoContext);\n  const [task, setTask] = useState('');\n\n  const handleSubmit = event => {\n    if (task) {\n      dispatch({ type: 'ADD_TODO', task, id: uuid() });\n    }\n    setTask('');\n    event.preventDefault();\n  };\n\n  const handleChange = event => setTask(event.target.value);\n  \n  return (\n    <form className=\"AddTodo\" onSubmit={handleSubmit}>\n      <input type=\"text\" value={task} onChange={handleChange} />\n      <button type=\"submit\">Add Todo</button>\n    </form>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}